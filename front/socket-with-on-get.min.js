class EventEmitter {
	constructor() {
		(this._events = {}), (this._onces = {});
	}
	on(a, b) {
		(this._events[a] = b), delete this._onces[a];
	}
	once(a, b) {
		(this._onces[a] = b), delete this._events[a];
	}
	emit(a, b) {
		this._events[a]
			? this._events[a](b)
			: this._onces[a] && (this._onces[a](b), delete this._onces[a]);
	}
}
class SocketWithOn extends EventEmitter {
	constructor(a) {
		super();
		const b = "undefined" == typeof window,
			c = a.write !== void 0;
		this.write = (e, f) => {
			c ? a.write(JSON.stringify([e, f])) : a.send(JSON.stringify([e, f]));
		};
		const d = e => {
			let f = b ? e : e.data,
				[g, h] = JSON.parse(f);
			this.emit(g, h);
		};
		b ? (a.on("message", d), a.on("data", d)) : (a.onmessage = d);
	}
}
class Socket extends EventEmitter {
	constructor(a) {
		super(), (this.ids = []), (this.write = a.write || a.emit);
		const b = ([c, d]) => {
			c in this.ids && (this.ids[c](d), delete this.ids[c]);
		};
		a.on(1, b),
			a.on(2, b),
			a.on(0, ([c, d, e]) => {
				this.emit(
					d,
					e,
					f => {
						this.write(1, [c, f]);
					},
					f => {
						this.write(2, [c, f]);
					}
				);
			}),
			(this.socket = a);
	}
	get(a, b) {
		return new Promise(async c => {
			const e =
					"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
				f = h => {
					const i = Array(h)
						.fill()
						.map(() => e.charAt(Math.floor(Math.random() * e.length)))
						.join("");
					return i in this.ids && (i = f(h)), i;
				},
				g = f(3);
			(this.ids[g] = c), this.write(0, [g, a, b]);
		});
	}
}
